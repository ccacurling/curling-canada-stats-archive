#!/usr/bin/env ruby
require 'yaml'
require 'fileutils'

class Vs
  def merge(a, b)
    for new_vs in b['vs']
      vs_found = false
      a['vs'].each_with_index {
        |local_vs, vs_index|
        if new_vs['name'] == local_vs['name']
          vs_found = true

          # vs record found
          # loop through totals
          for new_total in new_vs['totals']
            replaced = false
            local_vs['totals'].each_with_index {
              |local_total, total_index|
              if local_total['event'] == new_total['event'] && local_total['year'] == new_total['year']
                local_vs['totals'][total_index] = new_total
                replaced = true
              end
            }
            if !replaced
              local_vs['totals'].push(new_total)
            end
          end

          # loop through games
          for new_game in new_vs['games']
            replaced = false
            local_vs['games'].each_with_index {
              |local_game, game_index|
              if local_game['event'] == new_game['event'] && local_game['year'] == new_game['year'] && local_game['draw'] == new_game['draw']
                local_vs['games'][game_index] = new_game
                replaced = true
              end
            }
            if !replaced
              local_vs['games'].push(new_game)
            end
          end

        end
      }
      if vs_found == false
        a['vs'].push(new_vs)
      end
    end

    return a
  end
end

class Players
  def merge(a, b)
    # totals
    for new_total in b['totals']
      replaced = false
      a['totals'].each_with_index {
        |local_total, index|
        if local_total['event'] == new_total['event']
          a['totals'][index] = new_total
          replaced = true
        end
      }
      if !replaced
        a['totals'].push(new_total)
      end
    end

    # years
    for new_year in b['years']
      replaced = false
      a['years'].each_with_index {
        |local_year, index|
        if local_year['event'] == new_year['event'] &&
          local_year['year'] == new_year['year'] &&
          local_year['position'] == new_year['position']
          a['years'][index] = new_year
          replaced = true
        end
      }
      if !replaced
        a['years'].push(new_year)
      end
    end

    # vs
    if b['vs'] != nil
      if a['vs'] == nil
        a['vs'] = b['vs']
      else
        a['vs'] = (a['vs'] + b['vs']).uniq.sort_by(&:downcase)
      end
    end

    return a
  end
end

project_root = File.expand_path('../..', __dir__)
collections = project_root + '/collections/'
data = project_root + '/src/data/'

Dir.glob(data + '*/').sort.each do |type_dir|
  type = File.basename(type_dir)
  puts 'Processing "' + type + '"...'
  type_dest = collections + '_' + type

  merge_obj = Object.const_get(type.capitalize).new

  # Clean up existing data
  FileUtils.rm_rf(type_dest)
  FileUtils.mkdir_p(type_dest)

  Dir.glob(type_dir + '/*/*.md').sort.each do |new_file|
    $stdout.write("\e[2K\r" + new_file.split('/').last(2).join('/'))

    new_yaml = YAML.load_file(new_file)
    local_file = type_dest + '/' + File.basename(new_file)
    local_yaml = nil
    if File.file?(local_file)
      local_yaml = YAML.load_file(local_file)
    end

    # Merge non-AKA records
    if local_yaml != nil && local_yaml['aka'] == nil && new_yaml['aka'] == nil
      merged_yaml = merge_obj.merge(local_yaml, new_yaml)
      File.write(local_file, merged_yaml.to_yaml + '---')
    # New record or both AKA records
    elsif local_yaml == nil || (local_yaml['aka'] != nil && new_yaml['aka'] != nil)
      FileUtils.cp(new_file, local_file)
    else
      puts "\n[ERROR] attempting to merge AKA record with a regular record\n"
      exit(1)
    end    
  end
  print "\n\n"
end
